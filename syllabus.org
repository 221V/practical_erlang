* TODO Часть 1-я
   DEADLINE: <2015-04-12 Sun>

** DONE 1. Введение. Типы данных.

** DONE 2. Устройство списков. Рекурсивные функции с аккумуляторами.

** DONE 3. Функции высшего порядка. Свертка.

** TODO 4. Сопоставление с образцом
   конструкции case и if
   клозы функций
   guards

** TODO 5. KV-структуры данных
   DEADLINE: <2015-02-22 Sun>
   proplist, dict, orddict, gb_trees,
   maps
** TODO ets
   упомянуть dets, mnesia
** TODO io_list, binary, string, unicode
   flatten
** TODO Многопоточность в Erlang
   Жизнь erlang-процесса
   (бесконечная рекурсия, состояние на стеке)

** TODO Работа с потоками на низком уровне
   spawn, link, spawn_link,
   receive, register,
   monitor, exit, trap exit

** TODO OTP 1
   gen_server
   Пишем свою реализацию gen_server в несколько этапов

** TODO OTP 2
   supervisor, gen_fsm, gen_event

** TODO OTP 3
   application
   Типичная структура OTP проекта
   с дочерними приложениями и зависимыми библиотеками


* TODO Часть 2-я
   DEADLINE: <2015-06-14 Sun>

** TODO история эрланг на фоне истории программирования
** TODO Обработка ошибок
   Defensive Programming vs Let it crash
   Уровни изоляции ошибок
   http://jlouisramblings.blogspot.com/2010/11/on-erlang-state-and-crashes.html

** TODO Работа с сокетами
   TCP, UDP
   Активный и пассивный режим сокета
   Наивный tcp сервер
   Два вида протоколов: бинарные с размером впереди, текстовые с разделителем
   опробовать оба через telnet
   Ranch Acceptor Pool

** TODO Rebar
   управление зависимостями
   сборка проекта
   rebar 3,
   Makefile, EMakefile

** TODO Логирование
   report browser
   lager

** TODO Dialyzer
   типы данных, спеки
   build_
   check
   ignore

** TODO Работа с JSON
   jsonx, jiffy, ej, jesse

** TODO Cowboy 1
   Роутинг
   Статические файлы
   http хендлер

** TODO Cowboy 2
   Поддержка сессий
   cowboy 2.0

** TODO Cowboy 3
   websocket
   bullet
   пишем простой чат

** TODO Работа с базой данных
   epgsql, emysql

** TODO Еще полезные библиотеки
   erlydtl
   poolboy
   sheep
   herd
   orca
   erma
   lhttpc (или какая там у него замена сейчас?)

** TODO Eunit

** TODO Курсовая работа :)
   реализация key-value хранилища
   чтобы было интересно, с фичами:
   - сохранение на диск и восстановление
   - TCP интерфейс (доступ через telnet)
   - HTTP интерфейсом (используем cowboy)
   - журналирование


* Часть 3-я

** Observer, Webtool

** Сериализация данных
   bert, google protocol buffers

** Common test

** Релизы, relx

** Отладка
   trace, dbg, sys, observer

** Zabbix
   тулы для мониторинга логов, etc

** Распределенность
   Курсовая работа -- распределенный чат

** Работа с APNS, GCM
   ssl, сертификаты

** Кастомный супервизор с exponential backoff

** Валидация данных
   many inner case..of
   try..catch
   json scheme
   maybe/error monads
   list of validation functions, return: ok | {error, term()} | {stop, term()}
   get-данные можно перегнать в JSON и валидировать по схеме.
   Схема не годится там, где валидация с побочными эффектами: обращение к базе, к стороннему сервису и т.д.
