- закинуть пример ген-сервера
- просмотреть темы
- собрать туду с разных бумажек


* lesson 0. Intro.
сделать вводную в язык получше.
добавить инфу о новых книгах:
erlang in anger
desinign for scalability

* во время занятий буду рисовать разные схемы
потом нужно будет их фотографировать,
и переделать в нормальные слайды

* lesson 1
fun "и даже посылать на другую ноду, чтобы выполнить там."
кажись это не правда. Было в рассылке. Надо проверить

* erl консоль
показать основные фичи

* синтаксис
в конце строки может быть:
запятая, точка с запятой, точка, ничего
(но это после паттерн матчинга)

* kv структуры
разделить на новые и устаревшие
материал по устаревшим сократить

слайд: таблица CRUD операций для разных структур
главным образом, чтобы показать неконсистентность синтаксиса
которая характерна и для других мест в стандартных либах

* разные замечания
пометки в синей папке

* тема про валидацию
- throw vs pipeline/erlz
- придумать хороший пример
  включает
  - валидацию по схеме
  - дополнительные проверки после схемы
  - запросы к БД
  - http запросы к внешним сервисам
- реализовать его двумя способами, сравнить их
- сравнить также с реализацией на OCaml (Haskell)
  показать, что дает поддержка на уровне синтаксиса языка
- статья на хабре
- тема в курсе



* TODO курсовая работа
- ff_game
  + list_zipper:find + tests
  + matrix_zipper:find + tests
  - move (unit tests for each step)
    + find player on field (x,y)
    - move player to direction
    - fall previous cell
    - check is new cell stable, don't allow move if not
  - fall neighbour cells recursivelly

- telnet-client, TCP-socket
- game protocol

- login, join game

- game for each pair of players
  - game field for each game
  - step by step moves
  - game over

- functional tests
  tcp-client and game protocol

* Возможно стоит пересмотреть первые 1-2-3 упражения в сторону упрощения.
  самое 1-е упражнение точно стоит

* Когда курс будет закончен, вывести из sanbox на hexlet
  Дать ссылку на github/yzh44yzh/practial_erlang в своем блоге и своих аккаунтах (гуглоплюс, фейсбукс и т.д.)


* video

** TODO 7. io_list, binary, string, unicode

** TODO 8. Многопоточность в Erlang.

** TODO 9. gen_server

** TODO 10. gen_server, продолжение

** TODO 11. link, monitor

** TODO 12. supervisor

** TODO 13. application

** TODO 14. OTP фреймворк

** TODO 15. Обработка ошибок на разных уровнях

** TODO 16. TCP и UDP сокеты


* варианты заданий

herd_rand:uuid/0
https://ru.wikipedia.org/wiki/UUID
gen_server тут нужен, чтобы инициализировать в нем рандомайзер

морзе код



* Инфа

https://github.com/yzh44yzh/practical_erlang/

https://ru.hexlet.io/courses/erlang_101

Дока:
https://github.com/Hexlet/docs/blob/master/create-lesson.md

Dockerfile для установки Erlang, Rebar, Relx
https://registry.hub.docker.com/u/correl/erlang/dockerfile/


* урок по валидации входящих данных
вложенные case
исключения
схемы
erlmonads
и то, как я сделал для отписок в NC


* урок по raft


* Designing for <anything> with Erlang
https://medium.com/@dmitriid/designing-for-anything-with-erlang-cfadb6833bc0#.ctwsdsq0g

пост о том, чего не хватает в книгах по эрлангу

it would be really nice to read up on at least some of these things:
    setting up multiple nodes
    testing a distributed app
    deploying a distributed app
    handling failover
    handling load balancing
    handling netsplits (and not only in Mnesia. If we can add a process on node B to a gen_supervisor on node A, how do we handle netsplits, timeouts, restarts etc.?)
    discovery of nodes
    tracing
    profiling
    various VM options and their impact
    securing connection between nodes
    logging
    debugging
    crash dumps
    remote inspection
    mitigating overflowing mailboxes
    SSL
    sockets
    working from behind firewalls
    flood protection
    slow requests
    timeouts
    sessions
    latency
    <add your own>


* мнение питониста после 1 месяца знакомства с эрланг


Привожу субъективное мнение одного Python-разработчика о языке Erlang после пары месяцов разработки на этом языке.

Erlang не понравился потому, что:
1) обладает ужасным синтаксисом, который заставляет страдать(особенно доставляют запятые и балланс скобок различного типа);
-> замедляется скорость написания кода

2) генерирует невменяемые сообщения об ошибках, в которых много бесполезной информации и иногда отсутствует нужная информация для понимания проблемы;
-> замедляется скорость отладки

3) имеет плохую и довольно бедную стандартную библиотеку(после Python) с некоторыми кривыми legacy-типами данных, которые ни в коем случае нельзя использовать(например array);
-> замедляется скорость написания кода

4) довольно сложно писать код в функциональном стиле(не понятно, как реализовать довольно простые вещи без помощи опытного товарища);
-> замедляется скорость написания кода

5) сторонние библиотеки-акселераторы довольно часто кривые или их нет вообще;
-> удлинняется цикл разработки приложения

6) непонятно, как писать производительный код на Erlang: циклов нет, есть куча копирований списков на ровном месте,  тяжело оценить алгоритмическую сложность полученного решения;
-> большие риски написания кривого медленного кода, которые нужно компенсировать интенсивными бенчмарками
