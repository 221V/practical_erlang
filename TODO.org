* 00. Intro.
- перекинуть сюда материал из 01
- немного истории
- интро в эрланг

md не нужен, только презентация


* 01. типы данных
- убрать bit syntax, вынести его в отдельную тему. И там понадобятся годные примеры.
- добавить что-то еще из основ языка
- показать фичи консоли. И встроенные функции.
- fun "и даже посылать на другую ноду, чтобы выполнить там."
  кажись это не правда. Было в рассылке. Надо проверить


* 03. функции высшего порядка
Пифагоровы тройки. Добавить фильтр X < Y, чтобы исключить дубликаты.
ПЗ. что-то не то с очередностью данных то ли в dropwhile, то ли еще где-то


* 04. pattern matching
добавить объяснение про синтаксис:
в конце строки может быть запятая, точка с запятой, точка, ничего
в каких случаях что ставится.


* 05. kv структуры
слайд: таблица CRUD операций для разных структур
главным образом, чтобы показать неконсистентность синтаксиса
которая характерна и для других мест в стандартных либах
Наличие map, fold, filter

Практика: Сервис сокращения ссылок
использует устаревший модуль random, компилятор выдает warning
исправить
проверить все задания на warning


* 06. ets
в практическом задании сложности с отладкой
объяснить, как это лушче делать.
(тестить через консоль, читать сообщения об ошибках)


* 08. concurrency
убрать сложный пример кода с почтовым ящиком
заменить на картинку -- схему как он работает:
- FIFO
- receive, patterns, after

добавить про exit(Pid, shutdown)

Подготовить к практике MapReduce, показать, как можно наладить общение между потоками

В практике заменить:
lists:foldl на maps:fold
reduce_loop на [wait_data() || _ <- lists:seq(1, NumFiles)]


* 09. gen_server_1
- схема из 4х квадратов, как в gen_server_2 только для нашей кастомной реализации


* 10. gen_server_2
схема deadlock
прямой и через цепочку вызовов


* 12. supervisor
simple_one_for_one, можно ли остановить/удалить child?


* 13. Application
- показывать observer. На примере solution или на каком-нибудь другом примере.


* 14. OTP
- структуру проекта на примере rebar3 а не rebar2
- показать wgnet либы
- cowboy, cowlib, ranch -- пример OTP приложений
- схема -- проблема с транзитивными либами


* 15. обработка ошибок
- рассказать про pipeline
- показать, как это выглядит на OCaml (Haskell)


* outline (presentation)
- должен быть к каждому уроку
- переделать в pdf, сделать нормальной презентацией
  возможно есть смысл разбивать один урок на несколько презентаций.
  Например, тему 01 можно разбрить.
- все картинки вставить туда


* курсовая работа
- ff_game
  + list_zipper:find + tests
  + matrix_zipper:find + tests
  - move (unit tests for each step)
    + find player on field (x,y)
    - move player to direction
    - fall previous cell
    - check is new cell stable, don't allow move if not
  - fall neighbour cells recursivelly

- telnet-client, TCP-socket
- game protocol

- login, join game

- game for each pair of players
  - game field for each game
  - step by step moves
  - game over

- functional tests
  tcp-client and game protocol


* Факультативные минитемы
- память потока и сборщик мусора
- bit syntax
