* 00. Intro.
- перекинуть сюда материал из 01
- немного истории
- интро в эрланг

- добавить инфу о книгах:
  - 1й уровень, классика: JA, FC
  - 1й уровень, новые: FH
  - 2й уровень
    - erlang in anger FH
    - desinign for scalability FC

md не нужен, только презентация


* 01.
- убрать bit syntax, вынести его в отдельную тему. И там понадобятся годные примеры.
- добавить что-то еще из основ языка
- показать фичи консоли. И встроенные функции.
- fun "и даже посылать на другую ноду, чтобы выполнить там."
  кажись это не правда. Было в рассылке. Надо проверить


* 03. функции высшего порядка
Пифагоровы тройки. Добавить фильтр X < Y, чтобы исключить дубликаты.
ПЗ. что-то не то с очередностью данных то ли в dropwhile, то ли еще где-то


* pattern matching
добавить объяснение про синтаксис:
в конце строки может быть запятая, точка с запятой, точка, ничего
в каких случаях что ставится.


* kv структуры
разделить на новые и устаревшие
материал по устаревшим сократить

слайд: таблица CRUD операций для разных структур
главным образом, чтобы показать неконсистентность синтаксиса
которая характерна и для других мест в стандартных либах
Наличие map, fold, filter

2 варианта функций RUD - бросающие исключения и возвращающие монаду


* 05. ets
map перенести в предудыщую тему, kv структуры

в практическом задании сложности с отладкой
объяснить, как это лушче делать.
(тестить через консоль, читать сообщения об ошибках)


* ПЗ: Сервис сокращения ссылок
использует устаревший модуль random, компилятор выдает warning
исправить
проверить все задания на warning


* concurrency
убрать сложный пример кода с почтовым ящиком
заменить на картинку -- схему как он работает:
- FIFO
- receive, patterns, after

подготовить к практике MapReduce, показать, как можно наладить общение между потоками


* TODO gen_server_1
этапы по-другому
+ loop, echo messages
+ state and handle messages: add, remove, show, stop
  log error for unknown msg
+ hot code upgrate
+ public api
+ reply to client (duplicated code)
+ timeout
+ refactor call
+ refactor loop, вынести handle_call
- ref
- monitor
  показать краш на handle_call, и как он ловится монитором

- написать и протестить все этапы
- поправить lesson.md
- схема из 4х квадратов, как в gen_server_2 только для нашей кастомной реализации


* gen_server_2
схема deadlock
прямой и через цепочку вызовов


* supervisor
simple_one_for_one, можно ли остановить/удалить child?


* Application
- показывать observer. На примере solution или на каком-нибудь другом примере.


* OTP
- структуру проекта на примере rebar3 а не rebar2
- показать wgnet либы
- cowboy, cowlib, ranch -- пример OTP приложений
- схема -- проблема с транзитивными либами


* обработка ошибок
- рассказать про pipeline
- показать, как это выглядит на OCaml (Haskell)


* outline (presentation)
- должен быть к каждому уроку
- переделать в pdf, сделать нормальной презентацией
  возможно есть смысл разбивать один урок на несколько презентаций.
  Например, тему 01 можно разбрить.
- все картинки вставить туда


* Факультативные минитемы
- память потока и сборщик мусора
- bit syntax


* курсовая работа
- ff_game
  + list_zipper:find + tests
  + matrix_zipper:find + tests
  - move (unit tests for each step)
    + find player on field (x,y)
    - move player to direction
    - fall previous cell
    - check is new cell stable, don't allow move if not
  - fall neighbour cells recursivelly

- telnet-client, TCP-socket
- game protocol

- login, join game

- game for each pair of players
  - game field for each game
  - step by step moves
  - game over

- functional tests
  tcp-client and game protocol


* Когда курс будет закончен, вывести из sanbox на hexlet
  Дать ссылку на github/yzh44yzh/practial_erlang в своем блоге и своих аккаунтах (гуглоплюс, фейсбукс и т.д.)




* Инфа

https://github.com/yzh44yzh/practical_erlang/

https://ru.hexlet.io/courses/erlang_101

Дока:
https://github.com/Hexlet/docs/blob/master/create-lesson.md

Dockerfile для установки Erlang, Rebar, Relx
https://registry.hub.docker.com/u/correl/erlang/dockerfile/


* Designing for <anything> with Erlang
https://medium.com/@dmitriid/designing-for-anything-with-erlang-cfadb6833bc0#.ctwsdsq0g

пост о том, чего не хватает в книгах по эрлангу

it would be really nice to read up on at least some of these things:
    setting up multiple nodes
    testing a distributed app
    deploying a distributed app
    handling failover
    handling load balancing
    handling netsplits (and not only in Mnesia. If we can add a process on node B to a gen_supervisor on node A, how do we handle netsplits, timeouts, restarts etc.?)
    discovery of nodes
    tracing
    profiling
    various VM options and their impact
    securing connection between nodes
    logging
    debugging
    crash dumps
    remote inspection
    mitigating overflowing mailboxes
    SSL
    sockets
    working from behind firewalls
    flood protection
    slow requests
    timeouts
    sessions
    latency
    <add your own>
